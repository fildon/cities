{
  "version": 3,
  "sources": ["../src/city.ts", "../src/road.ts", "../src/vector.ts", "../src/simulation.ts", "../src/index.ts"],
  "sourcesContent": ["import { Road } from \"./road\";\nimport { Vector } from \"./vector\";\n\nexport class City {\n  /**\n   * Radius of clear space required around a city\n   */\n  public static REQUIRED_SPACE = 50;\n  /**\n   * The maximum distance over which a city will connect by road to another city\n   */\n  public static ROAD_DISTANCE = 100;\n  /**\n   * The size of the city as used by system logic.\n   * Can increase only in discrete integer values.\n   */\n  logicalSize = 1;\n  /**\n   * The size as used by animation.\n   * Tends to the logical size over time, but can only increase smoothly.\n   */\n  animatedSize = 0;\n  /**\n   * The age of this city as measured in milliseconds\n   */\n  age = 0;\n  /**\n   * How long since the city last evolved in milliseconds\n   */\n  last_evolved = 0;\n  constructor(readonly location: Vector) {}\n\n  advanceByTime(time: number) {\n    this.age += time;\n    this.last_evolved += time;\n\n    if (time > 1000) {\n      this.animatedSize = this.logicalSize;\n    } else {\n      // Interpolate the animated size towards the logical size\n      this.animatedSize =\n        this.animatedSize +\n        (this.logicalSize - this.animatedSize) * (time / 1000);\n    }\n  }\n\n  isReadyToEvolve(connectedRoads: Array<Road>) {\n    // Must not have evolved recently\n    if (this.last_evolved < 1000) return false;\n\n    // Must have at least 3 connections with equal sized cities\n    if (connectedRoads.filter((road) => road.isMutual()).length < 3)\n      return false;\n\n    // TODO this is \"business logic\" being influenced by framerate.\n    // A purist would vomit\n    return Math.random() < 0.05;\n  }\n\n  evolve() {\n    this.logicalSize += 1;\n    this.last_evolved = 0;\n  }\n\n  paintSelf(canvas: CanvasRenderingContext2D) {\n    canvas.beginPath();\n    canvas.arc(\n      this.location.x,\n      this.location.y,\n      this.animatedSize * 5,\n      0,\n      2 * Math.PI\n    );\n    // Colour the city based on its size\n    canvas.fillStyle =\n      [\"green\", \"yellow\", \"orange\", \"red\"][this.logicalSize - 1] ?? \"red\";\n    canvas.fill();\n\n    canvas.beginPath();\n    canvas.arc(\n      this.location.x,\n      this.location.y,\n      this.animatedSize * 5,\n      0,\n      2 * Math.PI\n    );\n    canvas.strokeStyle = \"black\";\n    canvas.lineWidth = 1;\n    canvas.stroke();\n  }\n}\n", "import { City } from \"./city\";\n\nexport class Road {\n  private created_at: number;\n  constructor(public start: City, public end: City) {\n    this.created_at = performance.now();\n  }\n\n  isMember(city: City) {\n    return [this.start, this.end].includes(city);\n  }\n\n  isMutual() {\n    return this.start.logicalSize === this.end.logicalSize;\n  }\n\n  /**\n   * A road becomes outgrown when it connects cities which differ in size too greatly\n   */\n  isOutgrown() {\n    return Math.abs(this.start.logicalSize - this.end.logicalSize) > 1;\n  }\n\n  paintSelf(canvas: CanvasRenderingContext2D) {\n    const age = performance.now() - this.created_at;\n    const matured = age > 1000;\n    /**\n     * 0-1 of how complete this animation is\n     */\n    const animationParam = matured ? 1 : age / 1000;\n    const lineWidth = 2 * animationParam;\n    const opacity = animationParam / 2;\n\n    canvas.beginPath();\n    canvas.moveTo(this.start.location.x, this.start.location.y);\n    canvas.lineWidth = lineWidth;\n    canvas.lineCap = \"round\";\n    canvas.strokeStyle = `rgba(0, 0, 0, ${opacity})`;\n    canvas.lineTo(this.end.location.x, this.end.location.y);\n    canvas.stroke();\n  }\n}\n", "export class Vector {\n  constructor(public x: number, public y: number) {}\n\n  distanceBetween(other: Vector) {\n    return Math.sqrt((this.x - other.x) ** 2 + (this.y - other.y) ** 2);\n  }\n}\n", "import { City } from \"./city\";\nimport { Road } from \"./road\";\nimport { Vector } from \"./vector\";\n\nexport class Simulation {\n  cities: Array<City> = [];\n  roads: Array<Road> = [];\n  private static TIME_BETWEEN_CITIES = 500;\n  /**\n   * Milliseconds until the next city spawn\n   */\n  timeToNextCity = 1000;\n  constructor(private width: number, private height: number) {}\n\n  advanceByTime(time: number) {\n    // Advance all existing cities by time.\n    // Note that this deliberately excludes the cities about to be created during this step.\n    // Newly created cities will get advanced on the next frame.\n    this.cities.forEach((city) => city.advanceByTime(time));\n\n    this.timeToNextCity -= time;\n\n    let qtyToCreate = 0;\n    while (this.timeToNextCity < 0) {\n      this.timeToNextCity += Simulation.TIME_BETWEEN_CITIES;\n      qtyToCreate += 1;\n    }\n\n    this.createNewCities(qtyToCreate);\n\n    this.evolveCities();\n  }\n\n  private roadsForCity(city: City) {\n    return this.roads.filter((road) => road.isMember(city));\n  }\n\n  private evolveCities() {\n    const citiesToEvolve = this.cities.filter((city) =>\n      city.isReadyToEvolve(this.roadsForCity(city))\n    );\n\n    citiesToEvolve.forEach((city) => city.evolve());\n\n    // Remove outgrown roads\n    this.roads = this.roads.filter((road) => !road.isOutgrown());\n  }\n\n  private createNewCities(qtyToCreate: number) {\n    while (qtyToCreate > 0) {\n      qtyToCreate -= 1;\n\n      /**\n       * Avoid building where it is too crowded.\n       * Note this this silently drops candidates which are too crowded.\n       */\n      const candidateLocation = new Vector(\n        this.width * Math.random(),\n        this.height * Math.random()\n      );\n      if (\n        this.cities.every(\n          (city) =>\n            candidateLocation.distanceBetween(city.location) >\n            City.REQUIRED_SPACE\n        )\n      ) {\n        const newCity = new City(candidateLocation);\n\n        const citiesToConnectTo = this.cities.filter(\n          (city) =>\n            city.location.distanceBetween(candidateLocation) <\n            City.ROAD_DISTANCE\n        );\n\n        const newRoads = citiesToConnectTo.map(\n          (city) => new Road(newCity, city)\n        );\n\n        if (newRoads.length > 0) {\n          this.roads = [...this.roads, ...newRoads];\n        }\n\n        this.cities.push(newCity);\n      }\n    }\n  }\n\n  paintSelf(canvas: CanvasRenderingContext2D) {\n    this.roads.forEach((road) => road.paintSelf(canvas));\n    this.cities.forEach((city) => city.paintSelf(canvas));\n  }\n}\n", "import { Simulation } from \"./simulation\";\n\nconst CANVAS_HEIGHT = 1000;\nconst CANVAS_WIDTH = 1000;\n\nconst canvasElement = document.querySelector(\"canvas\")!;\nconst canvasContext = canvasElement.getContext(\"2d\")!;\n\nconst simulation = new Simulation(1000, 1000);\n\nlet lastFrame: number | undefined;\nconst step = (now: number) => {\n  if (!lastFrame) lastFrame = now;\n  const elapsed = now - lastFrame;\n  lastFrame = now;\n\n  simulation.advanceByTime(elapsed);\n\n  canvasContext.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n  simulation.paintSelf(canvasContext);\n\n  window.requestAnimationFrame(step);\n};\n\nwindow.requestAnimationFrame(step);\n"],
  "mappings": "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",
  "names": []
}
